// <auto-generated />
using System;
using INFRASTRUCTURE.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace INFRASTRUCTURE.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20241003050757_RefreshMigration")]
    partial class RefreshMigration
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("DOMAIN.Model.AcademicCalendar", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CycleId")
                        .HasColumnType("int");

                    b.Property<DateTime>("EndDateTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("GradingPeriodId")
                        .HasColumnType("int");

                    b.Property<bool>("IsOpenOverride")
                        .HasColumnType("bit");

                    b.Property<DateTime>("StartDateTime")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CycleId");

                    b.HasIndex("GradingPeriodId");

                    b.ToTable("AcademicCalendars");
                });

            modelBuilder.Entity("DOMAIN.Model.AcademicProgram", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CollegeId")
                        .HasColumnType("int");

                    b.Property<string>("ProgramName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ShortName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("YearFirstImplemented")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CollegeId");

                    b.ToTable("AcademicPrograms");
                });

            modelBuilder.Entity("DOMAIN.Model.AcademicTerm", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AcademicTermDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Label")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("NumberOfGradingPeriod")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("AcademicTerms");
                });

            modelBuilder.Entity("DOMAIN.Model.AccessGroup", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AccessGroupName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("AccessGroups");
                });

            modelBuilder.Entity("DOMAIN.Model.AccessGroupAction", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AccessGroupId")
                        .HasColumnType("int");

                    b.Property<string>("Action")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AccessGroupId");

                    b.ToTable("AccessGroupActions");
                });

            modelBuilder.Entity("DOMAIN.Model.AccountGroup", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("AccountGroups");
                });

            modelBuilder.Entity("DOMAIN.Model.AdmissionApplicant", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AcademicProgramChoiceId1")
                        .HasColumnType("int");

                    b.Property<int>("AcademicProgramChoiceId2")
                        .HasColumnType("int");

                    b.Property<int?>("AcademicProgramChoiceId3")
                        .HasColumnType("int");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ApplicationType")
                        .HasColumnType("int");

                    b.Property<DateTime>("BirthDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("IsChildOfSoloParent")
                        .HasColumnType("bit");

                    b.Property<bool>("IsOnsite")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsSoloParent")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MiddleName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MobileNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("AdmissionApplicants");
                });

            modelBuilder.Entity("DOMAIN.Model.AdmissionApplicantFamilyDetails", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("AdmissionApplicantId")
                        .HasColumnType("int");

                    b.Property<DateTime>("BirthDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("City")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal?>("MonthlyIncome")
                        .HasColumnType("decimal(18,4)");

                    b.Property<string>("Occupation")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Relationship")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Religion")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("YearLevel")
                        .HasColumnType("int");

                    b.Property<decimal?>("YearlyCompensation")
                        .HasColumnType("decimal(18,4)");

                    b.HasKey("Id");

                    b.HasIndex("AdmissionApplicantId");

                    b.ToTable("AdmissionApplicantFamilyDetails");
                });

            modelBuilder.Entity("DOMAIN.Model.AdmissionApplication", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AdmissionApplicantId")
                        .HasColumnType("int");

                    b.Property<int>("AdmissionScheduleId")
                        .HasColumnType("int");

                    b.Property<string>("ApplicationReferenceNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Notes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OverAllStatus")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("SubmissionDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("AdmissionApplicantId");

                    b.HasIndex("AdmissionScheduleId");

                    b.ToTable("AdmissionApplications");
                });

            modelBuilder.Entity("DOMAIN.Model.AdmissionEvaluationSchedule", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AdmissionScheduleId")
                        .HasColumnType("int");

                    b.Property<string>("EvaluationLocation")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EvaluationOnlineLink")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EvaluationOnlinePassword")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EvaluationScheduleDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("EvaluationScheduleEnd")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("EvaluationScheduleStart")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsOnlineMode")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("AdmissionScheduleId");

                    b.ToTable("AdmissionEvaluationSchedules");
                });

            modelBuilder.Entity("DOMAIN.Model.AdmissionProgramRequirement", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AdmissionScheduleId")
                        .HasColumnType("int");

                    b.Property<bool>("IsEnabled")
                        .HasColumnType("bit");

                    b.Property<decimal>("PassingScore")
                        .HasColumnType("decimal(18,4)");

                    b.Property<int>("RequirementId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AdmissionScheduleId");

                    b.HasIndex("RequirementId");

                    b.ToTable("AdmissionProgramRequirements");
                });

            modelBuilder.Entity("DOMAIN.Model.AdmissionSchedule", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AcademicProgramId")
                        .HasColumnType("int");

                    b.Property<int>("CycleId")
                        .HasColumnType("int");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IntakeLimit")
                        .HasColumnType("bit");

                    b.Property<bool>("IsClosedOverride")
                        .HasColumnType("bit");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("AcademicProgramId");

                    b.HasIndex("CycleId");

                    b.ToTable("AdmissionSchedules");
                });

            modelBuilder.Entity("DOMAIN.Model.AdmissionScore", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<decimal>("ActualScore")
                        .HasColumnType("decimal(18,4)");

                    b.Property<int>("AdmissionApplicantId")
                        .HasColumnType("int");

                    b.Property<int>("AdmissionEvaluationScheduleId")
                        .HasColumnType("int");

                    b.Property<int>("AdmissionProgramRequirementId")
                        .HasColumnType("int");

                    b.Property<DateTime>("EvaluationPostDateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("EvaluationRemarks")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EvaluatorId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("PassingStatus")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AdmissionApplicantId");

                    b.HasIndex("AdmissionEvaluationScheduleId");

                    b.HasIndex("AdmissionProgramRequirementId");

                    b.HasIndex("EvaluatorId");

                    b.ToTable("AdmissionScores");
                });

            modelBuilder.Entity("DOMAIN.Model.Agency", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AgencyAddress")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AgencyName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ShortName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Agencies");
                });

            modelBuilder.Entity("DOMAIN.Model.Building", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("BuildingName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CampusId")
                        .HasColumnType("int");

                    b.Property<double>("Latitude")
                        .HasColumnType("float");

                    b.Property<double>("Longitude")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("CampusId");

                    b.ToTable("Buildings");
                });

            modelBuilder.Entity("DOMAIN.Model.Bulletin", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("BulletinCategoryId")
                        .HasColumnType("int");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Infographics")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsEnable")
                        .HasColumnType("bit");

                    b.Property<bool>("IsVisible")
                        .HasColumnType("bit");

                    b.Property<string>("PostedByUserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("Priority")
                        .HasColumnType("int");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("BulletinCategoryId");

                    b.HasIndex("PostedByUserId");

                    b.ToTable("Bulletins");
                });

            modelBuilder.Entity("DOMAIN.Model.BulletinCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Category")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("BulletinCategories");
                });

            modelBuilder.Entity("DOMAIN.Model.BulletinScope", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AcademicProgramId")
                        .HasColumnType("int");

                    b.Property<int>("BulletinId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AcademicProgramId");

                    b.HasIndex("BulletinId");

                    b.ToTable("BulletinScopes");
                });

            modelBuilder.Entity("DOMAIN.Model.Campus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("AgencyId")
                        .HasColumnType("int");

                    b.Property<string>("CampusName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CampusShortName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Latitude")
                        .HasColumnType("float");

                    b.Property<double>("Longitude")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("AgencyId");

                    b.ToTable("Campuses");
                });

            modelBuilder.Entity("DOMAIN.Model.ClearanceTag", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18,4)");

                    b.Property<int>("ClearanceTypeId")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("Deadline")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DuWhoTagId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("ExtendedDeadline")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsExtensible")
                        .HasColumnType("bit");

                    b.Property<bool>("IsOptional")
                        .HasColumnType("bit");

                    b.Property<bool>("IsSettled")
                        .HasColumnType("bit");

                    b.Property<DateTime>("RemindMeDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("SettledDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("SettlementInstruction")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UnclearedUserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("UserWhoClearedId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("ClearanceTypeId");

                    b.HasIndex("DuWhoTagId");

                    b.HasIndex("UnclearedUserId");

                    b.HasIndex("UserWhoClearedId");

                    b.ToTable("ClearanceTags");
                });

            modelBuilder.Entity("DOMAIN.Model.ClearanceType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("ClearanceTypes");
                });

            modelBuilder.Entity("DOMAIN.Model.College", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CampusId")
                        .HasColumnType("int");

                    b.Property<string>("CollegeName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CampusId");

                    b.ToTable("Colleges");
                });

            modelBuilder.Entity("DOMAIN.Model.Course", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CourseCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CourseDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CourseTitle")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("CreditUnits")
                        .HasColumnType("decimal(18,4)");

                    b.Property<int>("EducationalQualityAssuranceTypeId")
                        .HasColumnType("int");

                    b.Property<bool>("IsSpecialize")
                        .HasColumnType("bit");

                    b.Property<decimal>("LaboratoryUnits")
                        .HasColumnType("decimal(18,4)");

                    b.Property<decimal>("LectureUnits")
                        .HasColumnType("decimal(18,4)");

                    b.Property<int?>("ParentId")
                        .HasColumnType("int");

                    b.Property<int>("SfTrackSpecializationId")
                        .HasColumnType("int");

                    b.Property<bool>("WithLaboratory")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("EducationalQualityAssuranceTypeId");

                    b.HasIndex("ParentId");

                    b.HasIndex("SfTrackSpecializationId");

                    b.ToTable("Courses");
                });

            modelBuilder.Entity("DOMAIN.Model.CourseCrediting", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CourseId")
                        .HasColumnType("int");

                    b.Property<decimal>("CreditGrades")
                        .HasColumnType("decimal(18,4)");

                    b.Property<string>("CreditToUserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<decimal>("CreditUnits")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("CreditedDateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreditedFromCourseCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreditedFromCourseTitle")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CreditedFromSchoolId")
                        .HasColumnType("int");

                    b.Property<DateTime>("EncodedDateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("EvaluatedByUserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("OtherSchoolId")
                        .HasColumnType("int");

                    b.Property<string>("Remarks")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CourseId");

                    b.HasIndex("CreditToUserId");

                    b.HasIndex("EvaluatedByUserId");

                    b.HasIndex("OtherSchoolId");

                    b.ToTable("CourseCreditings");
                });

            modelBuilder.Entity("DOMAIN.Model.CourseFee", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CourseId")
                        .HasColumnType("int");

                    b.Property<int>("FeeId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CourseId");

                    b.HasIndex("FeeId");

                    b.ToTable("CourseFees");
                });

            modelBuilder.Entity("DOMAIN.Model.CourseRequisite", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CourseId")
                        .HasColumnType("int");

                    b.Property<int>("RequisiteCourseId")
                        .HasColumnType("int");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CourseId");

                    b.HasIndex("RequisiteCourseId");

                    b.ToTable("CourseRequisites");
                });

            modelBuilder.Entity("DOMAIN.Model.CourseToLearningObjectiveMapping", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CourseId")
                        .HasColumnType("int");

                    b.Property<int>("EducationalQualityAssuranceLearningObjectiveId")
                        .HasColumnType("int");

                    b.Property<int>("LearningObjectiveId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CourseId");

                    b.HasIndex("EducationalQualityAssuranceLearningObjectiveId");

                    b.ToTable("CourseToLearningObjectiveMappings");
                });

            modelBuilder.Entity("DOMAIN.Model.Curriculum", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AcademicProgramId")
                        .HasColumnType("int");

                    b.Property<int>("AcademicTermId")
                        .HasColumnType("int");

                    b.Property<string>("AuthorityLegal")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CurriculumCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CurriculumName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDefault")
                        .HasColumnType("bit");

                    b.Property<string>("Major")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("MinGradeToBeCulledId")
                        .HasColumnType("int");

                    b.Property<decimal>("MinUnitsToBeHonored")
                        .HasColumnType("decimal(18,4)");

                    b.Property<string>("Minor")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ProgramTypeId")
                        .HasColumnType("int");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("StudentMaxUnits")
                        .HasColumnType("int");

                    b.Property<int>("TotalAcademicTerm")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AcademicProgramId");

                    b.HasIndex("AcademicTermId");

                    b.HasIndex("MinGradeToBeCulledId");

                    b.HasIndex("ProgramTypeId");

                    b.ToTable("Curricula");
                });

            modelBuilder.Entity("DOMAIN.Model.CurriculumDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CourseId")
                        .HasColumnType("int");

                    b.Property<int>("CurriculumId")
                        .HasColumnType("int");

                    b.Property<bool>("IsIncludeGWA")
                        .HasColumnType("bit");

                    b.Property<int>("TermNumber")
                        .HasColumnType("int");

                    b.Property<int>("YearLevel")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CourseId");

                    b.HasIndex("CurriculumId");

                    b.ToTable("CurriculumDetails");
                });

            modelBuilder.Entity("DOMAIN.Model.Cycle", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CampusId")
                        .HasColumnType("int");

                    b.Property<string>("CycleDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CycleNumber")
                        .HasColumnType("int");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("SchoolYear")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CampusId");

                    b.ToTable("Cycles");
                });

            modelBuilder.Entity("DOMAIN.Model.EducationalQualityAssuranceAssessmentType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("EducationalQualityAssuranceAssessmentTypes");
                });

            modelBuilder.Entity("DOMAIN.Model.EducationalQualityAssuranceCourseObjective", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("EqaCourseObjective")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("EqaProgramObjectiveId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("EqaProgramObjectiveId");

                    b.ToTable("EducationalQualityAssuranceCourseObjectives");
                });

            modelBuilder.Entity("DOMAIN.Model.EducationalQualityAssuranceEducationalGoal", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("EqaGoal")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("EqaTypeId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("EqaTypeId");

                    b.ToTable("EducationalQualityAssuranceEducationalGoals");
                });

            modelBuilder.Entity("DOMAIN.Model.EducationalQualityAssuranceLearningObjective", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("EqaCourseObjectiveId")
                        .HasColumnType("int");

                    b.Property<string>("EqaLearningObjective")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("EqaCourseObjectiveId");

                    b.ToTable("EducationalQualityAssuranceLearningObjectives");
                });

            modelBuilder.Entity("DOMAIN.Model.EducationalQualityAssuranceProgramObjective", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("EqaEducationalGoalId")
                        .HasColumnType("int");

                    b.Property<string>("EqaProgramObjective")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("EqaEducationalGoalId");

                    b.ToTable("EducationalQualityAssuranceProgramObjectives");
                });

            modelBuilder.Entity("DOMAIN.Model.EducationalQualityAssuranceProgramObjectiveToJobRole", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("EqaProgramObjectiveId")
                        .HasColumnType("int");

                    b.Property<int>("SfJobRoleId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("EqaProgramObjectiveId");

                    b.HasIndex("SfJobRoleId");

                    b.ToTable("EducationalQualityAssuranceProgramObjectiveToJobRoles");
                });

            modelBuilder.Entity("DOMAIN.Model.EducationalQualityAssuranceType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("EqaLabel1")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EqaLabel2")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EqaLabel3")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EqaLabel4")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ShortName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("EducationalQualityAssuranceTypes");
                });

            modelBuilder.Entity("DOMAIN.Model.Enrollment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<decimal>("CreditUnits")
                        .HasColumnType("decimal(18,0)");

                    b.Property<int>("EnrollmentDateTime")
                        .HasColumnType("int");

                    b.Property<string>("EnrollmentNotes")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("EnrollmentRoleId")
                        .HasColumnType("int");

                    b.Property<string>("EnrollmentStatus")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("GradeOverallStatus")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("GradeRemarks")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsValidated")
                        .HasColumnType("bit");

                    b.Property<DateTime>("LastUpdatedDateTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("ScheduleId")
                        .HasColumnType("int");

                    b.Property<string>("StudentUserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("YearLEvel")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("EnrollmentRoleId");

                    b.HasIndex("ScheduleId");

                    b.HasIndex("StudentUserId");

                    b.ToTable("Enrollments");
                });

            modelBuilder.Entity("DOMAIN.Model.EnrollmentBilling", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("BillingDateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("BillingParticulars")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BillingReferenceNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BillingStatus")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Credit")
                        .HasColumnType("decimal(18,4)");

                    b.Property<int>("CycleId")
                        .HasColumnType("int");

                    b.Property<decimal>("Debit")
                        .HasColumnType("decimal(18,4)");

                    b.Property<DateTime>("DueDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("EnrollmentFeeId")
                        .HasColumnType("int");

                    b.Property<int>("EnrollmentId")
                        .HasColumnType("int");

                    b.Property<bool>("IsPosted")
                        .HasColumnType("bit");

                    b.Property<int>("VoucherId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CycleId");

                    b.HasIndex("EnrollmentFeeId");

                    b.HasIndex("EnrollmentId");

                    b.HasIndex("VoucherId");

                    b.ToTable("EnrollmentBillings");
                });

            modelBuilder.Entity("DOMAIN.Model.EnrollmentFee", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<decimal>("DefaultAmount")
                        .HasColumnType("decimal(18,4)");

                    b.Property<string>("FeeCategory")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FeeName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("FundSourceId")
                        .HasColumnType("int");

                    b.Property<int>("ObjectId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("FundSourceId");

                    b.HasIndex("ObjectId");

                    b.ToTable("EnrollmentFees");
                });

            modelBuilder.Entity("DOMAIN.Model.EnrollmentGrade", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedDateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("EncodedByUserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("EnrollmentId")
                        .HasColumnType("int");

                    b.Property<int>("GradeInputId")
                        .HasColumnType("int");

                    b.Property<string>("GradeNotes")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("GradeStatus")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("GradingPeriodId")
                        .HasColumnType("int");

                    b.Property<bool>("IsPosted")
                        .HasColumnType("bit");

                    b.Property<DateTime>("UpdatedDateTime")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("EncodedByUserId");

                    b.HasIndex("EnrollmentId");

                    b.HasIndex("GradeInputId");

                    b.HasIndex("GradingPeriodId");

                    b.ToTable("EnrollmentGrades");
                });

            modelBuilder.Entity("DOMAIN.Model.EnrollmentLog", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("EnrollmentId")
                        .HasColumnType("int");

                    b.Property<string>("LogByUserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("LogDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("LogDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NetworkAddress")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("EnrollmentId");

                    b.HasIndex("LogByUserId");

                    b.ToTable("EnrollmentLogs");
                });

            modelBuilder.Entity("DOMAIN.Model.EnrollmentPayment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18,4)");

                    b.Property<string>("CashierId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("EnrollmentBillingId")
                        .HasColumnType("int");

                    b.Property<string>("ORNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("PaymentDateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("PaymentDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PaymentMethod")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CashierId");

                    b.HasIndex("EnrollmentBillingId");

                    b.ToTable("EnrollmentPayments");
                });

            modelBuilder.Entity("DOMAIN.Model.EnrollmentRole", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("EnrollmentRoleName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("EnrollmentRoles");
                });

            modelBuilder.Entity("DOMAIN.Model.EvaluationPeriod", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AcademicProgramId")
                        .HasColumnType("int");

                    b.Property<string>("CreatedByUserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreatedDateTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("CycleId")
                        .HasColumnType("int");

                    b.Property<DateTime>("EndDateTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("EnrollmentRoleId")
                        .HasColumnType("int");

                    b.Property<int>("InstrumentId")
                        .HasColumnType("int");

                    b.Property<bool>("IsEnabled")
                        .HasColumnType("bit");

                    b.Property<bool>("IsOpenOverride")
                        .HasColumnType("bit");

                    b.Property<DateTime>("StartDateTime")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("AcademicProgramId");

                    b.HasIndex("CreatedByUserId");

                    b.HasIndex("CycleId");

                    b.HasIndex("EnrollmentRoleId");

                    b.HasIndex("InstrumentId");

                    b.ToTable("EvaluationPeriods");
                });

            modelBuilder.Entity("DOMAIN.Model.EvaluationRating", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("EnrollmentId")
                        .HasColumnType("int");

                    b.Property<int>("EvaluationPeriodId")
                        .HasColumnType("int");

                    b.Property<bool>("IsPosted")
                        .HasColumnType("bit");

                    b.Property<string>("OverallComment")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("RatingDateTime")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("EnrollmentId");

                    b.HasIndex("EvaluationPeriodId");

                    b.ToTable("EvaluationRatings");
                });

            modelBuilder.Entity("DOMAIN.Model.EvaluationRatingDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("EvaluationRatingId")
                        .HasColumnType("int");

                    b.Property<int>("EvaulationRatingId")
                        .HasColumnType("int");

                    b.Property<int>("LikertQuestionId")
                        .HasColumnType("int");

                    b.Property<int>("LikertScaleResponse")
                        .HasColumnType("int");

                    b.Property<string>("QuestionTextResponse")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("EvaluationRatingId");

                    b.HasIndex("LikertQuestionId");

                    b.ToTable("EvaluationRatingDetails");
                });

            modelBuilder.Entity("DOMAIN.Model.FileTable", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FileType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ReferenceId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Scope")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UploadDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("FileTables");
                });

            modelBuilder.Entity("DOMAIN.Model.FundSource", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("FundSources");
                });

            modelBuilder.Entity("DOMAIN.Model.GeneratedSections", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CurriculumDetailId")
                        .HasColumnType("int");

                    b.Property<int>("CycleId")
                        .HasColumnType("int");

                    b.Property<string>("SectionCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SectionName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CurriculumDetailId");

                    b.HasIndex("CycleId");

                    b.ToTable("GeneratedSections");
                });

            modelBuilder.Entity("DOMAIN.Model.GradeBook", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("GradeBookDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ScheduleId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ScheduleId");

                    b.ToTable("GradeBooks");
                });

            modelBuilder.Entity("DOMAIN.Model.GradeBookItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("GradeBookId")
                        .HasColumnType("int");

                    b.Property<int>("GradingPeriodId")
                        .HasColumnType("int");

                    b.Property<string>("ItemName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Weight")
                        .HasColumnType("decimal(18,4)");

                    b.HasKey("Id");

                    b.HasIndex("GradeBookId");

                    b.HasIndex("GradingPeriodId");

                    b.ToTable("GradeBookItems");
                });

            modelBuilder.Entity("DOMAIN.Model.GradeBookItemDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("EqaAssessmentTypeId")
                        .HasColumnType("int");

                    b.Property<int>("GradeBookItemId")
                        .HasColumnType("int");

                    b.Property<string>("ItemDetail")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ItemDetailDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("MaxScore")
                        .HasColumnType("decimal(18,4)");

                    b.Property<decimal>("PassingScore")
                        .HasColumnType("decimal(18,4)");

                    b.Property<decimal>("Weight")
                        .HasColumnType("decimal(18,4)");

                    b.HasKey("Id");

                    b.HasIndex("EqaAssessmentTypeId");

                    b.HasIndex("GradeBookItemId");

                    b.ToTable("GradeBookItemDetails");
                });

            modelBuilder.Entity("DOMAIN.Model.GradeBookItemToEqaLearningObjectiveMapping", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("EqaLearningObjectiveId")
                        .HasColumnType("int");

                    b.Property<int>("GradeBookItemDetailId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("EqaLearningObjectiveId");

                    b.HasIndex("GradeBookItemDetailId");

                    b.ToTable("GradeBookItemToEqaLearningObjectiveMappings");
                });

            modelBuilder.Entity("DOMAIN.Model.GradeBookScore", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("EnrollmentId")
                        .HasColumnType("int");

                    b.Property<int>("GradeBookItemDetailId")
                        .HasColumnType("int");

                    b.Property<decimal>("Score")
                        .HasColumnType("decimal(18,4)");

                    b.HasKey("Id");

                    b.HasIndex("EnrollmentId");

                    b.ToTable("GradeBookScores");
                });

            modelBuilder.Entity("DOMAIN.Model.GradeInput", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<decimal>("EndRange")
                        .HasColumnType("decimal(18,4)");

                    b.Property<string>("GradeDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("GradeInputType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("GradeRemarks")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LetterGrade")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("NumericGrade")
                        .HasColumnType("decimal(18,4)");

                    b.Property<decimal>("StartRange")
                        .HasColumnType("decimal(18,4)");

                    b.HasKey("Id");

                    b.ToTable("GradeInputs");
                });

            modelBuilder.Entity("DOMAIN.Model.GradingPeriod", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CollegeId")
                        .HasColumnType("int");

                    b.Property<int>("GradingNumber")
                        .HasColumnType("int");

                    b.Property<string>("GradingPeriodDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CollegeId");

                    b.ToTable("GradingPeriods");
                });

            modelBuilder.Entity("DOMAIN.Model.GraduationApplicant", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AcademicProgramId")
                        .HasColumnType("int");

                    b.Property<DateTime>("ApplicationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ApplicationStatus")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("GraduatingStudentId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("GraduationCampusId")
                        .HasColumnType("int");

                    b.Property<bool>("IsAbsentDuringGraduation")
                        .HasColumnType("bit");

                    b.Property<bool>("IsGraduated")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("AcademicProgramId");

                    b.HasIndex("GraduatingStudentId");

                    b.HasIndex("GraduationCampusId");

                    b.ToTable("GraduationApplicants");
                });

            modelBuilder.Entity("DOMAIN.Model.GraduationCampus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("ApplicationEndDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("ApplicationStartDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("BORResolution")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CampusId")
                        .HasColumnType("int");

                    b.Property<DateTime>("GraduationDateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("GraduationTheme")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("GuestOfHonor")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Venue")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<float>("VenueLatitude")
                        .HasColumnType("real");

                    b.Property<float>("VenueLongitude")
                        .HasColumnType("real");

                    b.HasKey("Id");

                    b.HasIndex("CampusId");

                    b.ToTable("GraduationCampuses");
                });

            modelBuilder.Entity("DOMAIN.Model.Instrument", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("NumberOfChoices")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Instruments");
                });

            modelBuilder.Entity("DOMAIN.Model.LikertQuestion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("IsEnabled")
                        .HasColumnType("bit");

                    b.Property<bool>("IsVisible")
                        .HasColumnType("bit");

                    b.Property<int>("LikertScale")
                        .HasColumnType("int");

                    b.Property<int>("ParameterId")
                        .HasColumnType("int");

                    b.Property<string>("QuestionText")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ParameterId");

                    b.ToTable("LikertQuestions");
                });

            modelBuilder.Entity("DOMAIN.Model.OtherSchool", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Mobile")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SchoolCampus")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SchoolName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("OtherSchools");
                });

            modelBuilder.Entity("DOMAIN.Model.Parameter", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ParameterName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ParameterSubCategoryId")
                        .HasColumnType("int");

                    b.Property<int?>("ParentId")
                        .HasColumnType("int");

                    b.Property<string>("QuestionTypeLikertOrText")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ParameterSubCategoryId");

                    b.HasIndex("ParentId");

                    b.ToTable("Parameters");
                });

            modelBuilder.Entity("DOMAIN.Model.ParameterCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("InstrumentId")
                        .HasColumnType("int");

                    b.Property<string>("ParameterCategoryName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("InstrumentId");

                    b.ToTable("ParameterCategories");
                });

            modelBuilder.Entity("DOMAIN.Model.ParameterSubCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ParameterCategoryId")
                        .HasColumnType("int");

                    b.Property<string>("ParameterSubCategoryName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ParameterCategoryId");

                    b.ToTable("ParameterSubCategories");
                });

            modelBuilder.Entity("DOMAIN.Model.PetitionCourses", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AcademicProgramId")
                        .HasColumnType("int");

                    b.Property<int>("CourseId")
                        .HasColumnType("int");

                    b.Property<int>("CycleId")
                        .HasColumnType("int");

                    b.Property<string>("PetitionByUserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("PetitionDateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("ReasonText")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AcademicProgramId");

                    b.HasIndex("CourseId");

                    b.HasIndex("CycleId");

                    b.HasIndex("PetitionByUserId");

                    b.ToTable("PetitionCourses");
                });

            modelBuilder.Entity("DOMAIN.Model.PortfolioDisciplinaryAction", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ActionDetails")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ActionType")
                        .HasColumnType("int");

                    b.Property<string>("ImposedByUserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("PortfolioIncidentId")
                        .HasColumnType("int");

                    b.Property<DateTime>("PostedDateTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ImposedByUserId");

                    b.HasIndex("PortfolioIncidentId");

                    b.ToTable("PortfolioDisciplinaryActions");
                });

            modelBuilder.Entity("DOMAIN.Model.PortfolioEntry", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<decimal>("CreditPoints")
                        .HasColumnType("decimal(18,4)");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("ExpiryDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("IssueDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("MentorOrAdviser")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PortfolioDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PortfolioProviderId")
                        .HasColumnType("int");

                    b.Property<string>("PortfolioReferenceNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PortfolioScopeId")
                        .HasColumnType("int");

                    b.Property<string>("PortfolioTitle")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PortfolioTypeId")
                        .HasColumnType("int");

                    b.Property<int>("SfProficiencyLevelId")
                        .HasColumnType("int");

                    b.Property<int>("SfSkillsId")
                        .HasColumnType("int");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("PortfolioProviderId");

                    b.HasIndex("PortfolioScopeId");

                    b.HasIndex("PortfolioTypeId");

                    b.HasIndex("SfProficiencyLevelId");

                    b.HasIndex("SfSkillsId");

                    b.HasIndex("UserId");

                    b.ToTable("PortfolioEntries");
                });

            modelBuilder.Entity("DOMAIN.Model.PortfolioIncident", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ComplainantUserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ComplaineeUserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("EncodedByUserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("IncidentDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("IncidentText")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsPosted")
                        .HasColumnType("bit");

                    b.Property<int>("PortfolioIncidentTypeId")
                        .HasColumnType("int");

                    b.Property<DateTime>("PostedDateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("ResolutionText")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ComplainantUserId");

                    b.HasIndex("ComplaineeUserId");

                    b.HasIndex("EncodedByUserId");

                    b.HasIndex("PortfolioIncidentTypeId");

                    b.ToTable("PortfolioIncidents");
                });

            modelBuilder.Entity("DOMAIN.Model.PortfolioIncidentType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("PortfolioIncidentTypes");
                });

            modelBuilder.Entity("DOMAIN.Model.PortfolioProvider", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Authority")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ContactNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ContractName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EmailAddress")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProviderAddress")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProviderName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SectorDisciplineId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("SectorDisciplineId");

                    b.ToTable("PortfolioProviders");
                });

            modelBuilder.Entity("DOMAIN.Model.PortfolioScope", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ScopeName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("PortfolioScopes");
                });

            modelBuilder.Entity("DOMAIN.Model.PortfolioSession", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedDateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("FollowupDateTime")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsPosted")
                        .HasColumnType("bit");

                    b.Property<int>("PortfolioSessionTypeId")
                        .HasColumnType("int");

                    b.Property<DateTime>("PostedDateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("ReferenceTag")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ReferenceTagType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("SessionEndDateTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("SessionStartDateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("SessionSummaryText")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("PortfolioSessionTypeId");

                    b.ToTable("PortfolioSessions");
                });

            modelBuilder.Entity("DOMAIN.Model.PortfolioSessionInvolved", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("PortfolioSessionId")
                        .HasColumnType("int");

                    b.Property<string>("RoleDescripton")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("PortfolioSessionId");

                    b.HasIndex("UserId");

                    b.ToTable("PortfolioSessionInvolved");
                });

            modelBuilder.Entity("DOMAIN.Model.PortfolioSessionType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("SessionType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("PortfolioSessionTypes");
                });

            modelBuilder.Entity("DOMAIN.Model.PortfolioType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TypeGroup")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("PortfolioTypes");
                });

            modelBuilder.Entity("DOMAIN.Model.ProgramType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ProgramTypeName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("ProgramTypes");
                });

            modelBuilder.Entity("DOMAIN.Model.Requirement", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsOptional")
                        .HasColumnType("bit");

                    b.Property<string>("RequirementDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RequirementName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Requirements");
                });

            modelBuilder.Entity("DOMAIN.Model.Room", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("BuildingId")
                        .HasColumnType("int");

                    b.Property<int>("Capacity")
                        .HasColumnType("int");

                    b.Property<bool>("IsEspecializedLab")
                        .HasColumnType("bit");

                    b.Property<bool>("IsLab")
                        .HasColumnType("bit");

                    b.Property<string>("RoomName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("BuildingId");

                    b.ToTable("Rooms");
                });

            modelBuilder.Entity("DOMAIN.Model.Schedule", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AcademicProgramId")
                        .HasColumnType("int");

                    b.Property<int?>("CourseId")
                        .HasColumnType("int");

                    b.Property<string>("CreatedByUserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("CycleId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("DaySchedule")
                        .HasColumnType("datetime2");

                    b.Property<string>("GeneratedReference")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("GeneratedSection")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsExclusive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsPetitionSchedule")
                        .HasColumnType("bit");

                    b.Property<int>("MaxStudent")
                        .HasColumnType("int");

                    b.Property<int>("MinStudent")
                        .HasColumnType("int");

                    b.Property<int?>("RoomId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("TimeScheduleIn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("TimeScheduleOut")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("AcademicProgramId");

                    b.HasIndex("CourseId");

                    b.HasIndex("CreatedByUserId");

                    b.HasIndex("CycleId");

                    b.HasIndex("RoomId");

                    b.ToTable("Schedules");
                });

            modelBuilder.Entity("DOMAIN.Model.ScheduleAttendance", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AnyUserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CheckInDateTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("CheckOutDateTime")
                        .HasColumnType("datetime2");

                    b.Property<float>("InLatitude")
                        .HasColumnType("real");

                    b.Property<float>("InLongitude")
                        .HasColumnType("real");

                    b.Property<float>("OutLatitude")
                        .HasColumnType("real");

                    b.Property<float>("OutLongitude")
                        .HasColumnType("real");

                    b.Property<int>("ScheduleId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AnyUserId");

                    b.HasIndex("ScheduleId");

                    b.ToTable("ScheduleAttendances");
                });

            modelBuilder.Entity("DOMAIN.Model.ScheduleMerge", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("MergeCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ScheduleId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ScheduleId");

                    b.ToTable("ScheduleMerges");
                });

            modelBuilder.Entity("DOMAIN.Model.ScheduleTeacher", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("EnrollmentRoleId")
                        .HasColumnType("int");

                    b.Property<int>("ScheduleId")
                        .HasColumnType("int");

                    b.Property<string>("TeacherUserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("EnrollmentRoleId");

                    b.HasIndex("ScheduleId");

                    b.HasIndex("TeacherUserId");

                    b.ToTable("ScheduleTeachers");
                });

            modelBuilder.Entity("DOMAIN.Model.ScholarshipApplication", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ApplicantUserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("ApplicationDateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("ApplicationStatus")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ApplicationType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsApproved")
                        .HasColumnType("bit");

                    b.Property<DateTime>("PostedDateTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("ScholarshipCycleLimitId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ApplicantUserId");

                    b.HasIndex("ScholarshipCycleLimitId");

                    b.ToTable("ScholarshipApplications");
                });

            modelBuilder.Entity("DOMAIN.Model.ScholarshipCycleLimit", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("ApplicationEndDateTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("ApplicationStartDateTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("CycleId")
                        .HasColumnType("int");

                    b.Property<bool>("IsEnabled")
                        .HasColumnType("bit");

                    b.Property<bool>("IsOpenOverride")
                        .HasColumnType("bit");

                    b.Property<int>("MaxNumberOfScholars")
                        .HasColumnType("int");

                    b.Property<int>("ScholarshipListId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CycleId");

                    b.HasIndex("ScholarshipListId");

                    b.ToTable("ScholarshipCycleLimits");
                });

            modelBuilder.Entity("DOMAIN.Model.ScholarshipEvaluation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<decimal>("EvalScore")
                        .HasColumnType("decimal(18,4)");

                    b.Property<string>("EvaluationDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EvaluationStatus")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EvaluatorUserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("ScholarshipApplicationId")
                        .HasColumnType("int");

                    b.Property<int>("ScholarshipRequirementId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("EvaluatorUserId");

                    b.HasIndex("ScholarshipApplicationId");

                    b.HasIndex("ScholarshipRequirementId");

                    b.ToTable("ScholarshipEvaluations");
                });

            modelBuilder.Entity("DOMAIN.Model.ScholarshipList", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18,4)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("ScholarshipName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ShortName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Sponsor")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("ScholarshipLists");
                });

            modelBuilder.Entity("DOMAIN.Model.ScholarshipRequirement", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("RequirementId")
                        .HasColumnType("int");

                    b.Property<int>("ScholarshipListId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RequirementId");

                    b.HasIndex("ScholarshipListId");

                    b.ToTable("ScholarshipRequirements");
                });

            modelBuilder.Entity("DOMAIN.Model.SectorDiscipline", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("DisciplineDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ParentId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ParentId");

                    b.ToTable("SectorDisciplines");
                });

            modelBuilder.Entity("DOMAIN.Model.SkillsFrameworkCompetency", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Competency")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CredentialCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsMicroCredential")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.ToTable("SkillsFrameworkCompetencies");
                });

            modelBuilder.Entity("DOMAIN.Model.SkillsFrameworkCompetencyCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CategoryName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SectorDisciplineId")
                        .HasColumnType("int");

                    b.Property<int>("SfCompetencyTypeId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("SectorDisciplineId");

                    b.HasIndex("SfCompetencyTypeId");

                    b.ToTable("SkillsFrameworkCompetencyCategories");
                });

            modelBuilder.Entity("DOMAIN.Model.SkillsFrameworkCompetencyType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CompetencyType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("SkillsFrameworkCompetencyTypes");
                });

            modelBuilder.Entity("DOMAIN.Model.SkillsFrameworkCourseToCompetency", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CourseId")
                        .HasColumnType("int");

                    b.Property<int>("SkillsFrameworkSkillsToCompetencyId")
                        .HasColumnType("int");

                    b.Property<int>("SkillsToCompetencyId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CourseId");

                    b.HasIndex("SkillsFrameworkSkillsToCompetencyId");

                    b.ToTable("SkillsFrameworkCourseToCompetencies");
                });

            modelBuilder.Entity("DOMAIN.Model.SkillsFrameworkCriticalWorkFunction", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CriticalWorkFunction")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("SkillsFrameworkCriticalWorkFunctions");
                });

            modelBuilder.Entity("DOMAIN.Model.SkillsFrameworkGroupLevel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("GroupLevel")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("SkillsFrameworkGroupLevels");
                });

            modelBuilder.Entity("DOMAIN.Model.SkillsFrameworkJobRole", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("JobDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SfTrackSpecializationId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("SfTrackSpecializationId");

                    b.ToTable("SkillsFrameworkJobRoleJobRoles");
                });

            modelBuilder.Entity("DOMAIN.Model.SkillsFrameworkJobRoleToCriticalWorkFunction", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("SfCriticalWorkFunctionId")
                        .HasColumnType("int");

                    b.Property<int>("SfJoBRole")
                        .HasColumnType("int");

                    b.Property<int>("SfJobRoleId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("SfCriticalWorkFunctionId");

                    b.HasIndex("SfJobRoleId");

                    b.ToTable("SkillsFrameworkJobRoleToCriticalWorkFunctions");
                });

            modelBuilder.Entity("DOMAIN.Model.SkillsFrameworkJobRoleToProficiencyLevel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("SfJobRoleToCriticalWorkFunctionId")
                        .HasColumnType("int");

                    b.Property<int>("SfProficiencyLevelId")
                        .HasColumnType("int");

                    b.Property<int>("SfSkillsId")
                        .HasColumnType("int");

                    b.Property<int>("SkillsFrameworkSkillsId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("SfJobRoleToCriticalWorkFunctionId");

                    b.HasIndex("SfProficiencyLevelId");

                    b.HasIndex("SkillsFrameworkSkillsId");

                    b.ToTable("SkillsFrameworkJobRoleToProficiencyLevels");
                });

            modelBuilder.Entity("DOMAIN.Model.SkillsFrameworkKeyTask", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("KeyTask")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SfCriticalWorkFunctionId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("SfCriticalWorkFunctionId");

                    b.ToTable("SkillsFrameworkKeyTasks");
                });

            modelBuilder.Entity("DOMAIN.Model.SkillsFrameworkPerformaceExpectationToJobRole", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("SfJobRoleId")
                        .HasColumnType("int");

                    b.Property<int>("SfPerformanceExpectationId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("SfJobRoleId");

                    b.HasIndex("SfPerformanceExpectationId");

                    b.ToTable("SkillsFrameworkPerformaceExpectationToJobRoles");
                });

            modelBuilder.Entity("DOMAIN.Model.SkillsFrameworkPerformanceExpectation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("PerformaceExpectation")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("SkillsFrameworkPerformanceExpectations");
                });

            modelBuilder.Entity("DOMAIN.Model.SkillsFrameworkProficiencyLevel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ProficiencyLevel")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SfGroupLevelId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("SfGroupLevelId");

                    b.ToTable("SkillsFrameworkProficiencyLevels");
                });

            modelBuilder.Entity("DOMAIN.Model.SkillsFrameworkSkills", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SfCompetencyCategoryId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("SfCompetencyCategoryId");

                    b.ToTable("SkillsFrameworkSkills");
                });

            modelBuilder.Entity("DOMAIN.Model.SkillsFrameworkSkillsToCompetency", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("SfCompetencyId")
                        .HasColumnType("int");

                    b.Property<int>("SfProficiencyLevelId")
                        .HasColumnType("int");

                    b.Property<int>("SfSkillsId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("SfCompetencyId");

                    b.HasIndex("SfProficiencyLevelId");

                    b.HasIndex("SfSkillsId");

                    b.ToTable("SkillsFrameworkSkillsToCompetencies");
                });

            modelBuilder.Entity("DOMAIN.Model.SkillsFrameworkTrackSpecialization", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("SectorDisciplineId")
                        .HasColumnType("int");

                    b.Property<string>("Specialization")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("SectorDisciplineId");

                    b.ToTable("SkillsFrameworkTrackSpecializations");
                });

            modelBuilder.Entity("DOMAIN.Model.TableObject", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AccountGroupId")
                        .HasColumnType("int");

                    b.Property<string>("AccountName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ParentId")
                        .HasColumnType("int");

                    b.Property<string>("Uacs")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AccountGroupId");

                    b.HasIndex("ParentId");

                    b.ToTable("TableObjects");
                });

            modelBuilder.Entity("DOMAIN.Model.TemplateGradeBook", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("TemplateName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("TemplateGradeBooks");
                });

            modelBuilder.Entity("DOMAIN.Model.TemplateGradeBookItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("GradingPeriodId")
                        .HasColumnType("int");

                    b.Property<string>("ItemName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TemplateGradeBookId")
                        .HasColumnType("int");

                    b.Property<decimal>("Weight")
                        .HasColumnType("decimal(18,4)");

                    b.HasKey("Id");

                    b.HasIndex("GradingPeriodId");

                    b.HasIndex("TemplateGradeBookId");

                    b.ToTable("TemplateGradeBookItems");
                });

            modelBuilder.Entity("DOMAIN.Model.TemplateGradeBookItemDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("EqaAssessmentTypeId")
                        .HasColumnType("int");

                    b.Property<string>("ItemDetail")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ItemDetailDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("MaxScore")
                        .HasColumnType("decimal(18,4)");

                    b.Property<decimal>("PassingScore")
                        .HasColumnType("decimal(18,4)");

                    b.Property<int>("TemplateGradeBookItemId")
                        .HasColumnType("int");

                    b.Property<decimal>("Weight")
                        .HasColumnType("decimal(18,4)");

                    b.HasKey("Id");

                    b.HasIndex("EqaAssessmentTypeId");

                    b.HasIndex("TemplateGradeBookItemId");

                    b.ToTable("TemplateGradeBookItemDetails");
                });

            modelBuilder.Entity("DOMAIN.Model.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("BirthDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ConcurrencyStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("DOMAIN.Model.UserAccessGroupDetails", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AccessGroupActionId")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("AccessGroupActionId");

                    b.HasIndex("UserId");

                    b.ToTable("UserAccessGroupDetails");
                });

            modelBuilder.Entity("DOMAIN.Model.UserCampusDetails", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CampusId")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("CampusId");

                    b.HasIndex("UserId");

                    b.ToTable("UserCampusDetails");
                });

            modelBuilder.Entity("DOMAIN.Model.Voucher", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<decimal>("DefaultAmount")
                        .HasColumnType("decimal(18,4)");

                    b.Property<DateTime>("ExpiryDateTime")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsEnabled")
                        .HasColumnType("bit");

                    b.Property<bool>("IsPercentage")
                        .HasColumnType("bit");

                    b.Property<string>("VoucherCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("VoucherCriteria")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("VoucherDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("VoucherName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("VoucherType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Vouchers");
                });

            modelBuilder.Entity("DOMAIN.Model.VoucherApplied", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18,4)");

                    b.Property<int>("EnrollmentBillingId")
                        .HasColumnType("int");

                    b.Property<int>("VoucherId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("EnrollmentBillingId");

                    b.HasIndex("VoucherId");

                    b.ToTable("VoucherApplied");
                });

            modelBuilder.Entity("DOMAIN.Model.AcademicCalendar", b =>
                {
                    b.HasOne("DOMAIN.Model.Cycle", "Cycle")
                        .WithMany()
                        .HasForeignKey("CycleId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("DOMAIN.Model.GradingPeriod", "GradingPeriod")
                        .WithMany()
                        .HasForeignKey("GradingPeriodId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Cycle");

                    b.Navigation("GradingPeriod");
                });

            modelBuilder.Entity("DOMAIN.Model.AcademicProgram", b =>
                {
                    b.HasOne("DOMAIN.Model.College", "College")
                        .WithMany()
                        .HasForeignKey("CollegeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("College");
                });

            modelBuilder.Entity("DOMAIN.Model.AccessGroupAction", b =>
                {
                    b.HasOne("DOMAIN.Model.AccessGroup", "AccessGroup")
                        .WithMany("AccessGroupActions")
                        .HasForeignKey("AccessGroupId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("AccessGroup");
                });

            modelBuilder.Entity("DOMAIN.Model.AdmissionApplicantFamilyDetails", b =>
                {
                    b.HasOne("DOMAIN.Model.AdmissionApplicant", "Applicant")
                        .WithMany()
                        .HasForeignKey("AdmissionApplicantId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Applicant");
                });

            modelBuilder.Entity("DOMAIN.Model.AdmissionApplication", b =>
                {
                    b.HasOne("DOMAIN.Model.AdmissionApplicant", "AdmissionApplicant")
                        .WithMany()
                        .HasForeignKey("AdmissionApplicantId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("DOMAIN.Model.AdmissionSchedule", "AdmissionSchedule")
                        .WithMany()
                        .HasForeignKey("AdmissionScheduleId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("AdmissionApplicant");

                    b.Navigation("AdmissionSchedule");
                });

            modelBuilder.Entity("DOMAIN.Model.AdmissionEvaluationSchedule", b =>
                {
                    b.HasOne("DOMAIN.Model.AdmissionSchedule", "AdmissionSchedule")
                        .WithMany()
                        .HasForeignKey("AdmissionScheduleId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("AdmissionSchedule");
                });

            modelBuilder.Entity("DOMAIN.Model.AdmissionProgramRequirement", b =>
                {
                    b.HasOne("DOMAIN.Model.AdmissionSchedule", "AdmissionSchedule")
                        .WithMany()
                        .HasForeignKey("AdmissionScheduleId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("DOMAIN.Model.Requirement", "Requirement")
                        .WithMany()
                        .HasForeignKey("RequirementId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("AdmissionSchedule");

                    b.Navigation("Requirement");
                });

            modelBuilder.Entity("DOMAIN.Model.AdmissionSchedule", b =>
                {
                    b.HasOne("DOMAIN.Model.AcademicProgram", "AcademicProgram")
                        .WithMany()
                        .HasForeignKey("AcademicProgramId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("DOMAIN.Model.Cycle", "Cycle")
                        .WithMany()
                        .HasForeignKey("CycleId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("AcademicProgram");

                    b.Navigation("Cycle");
                });

            modelBuilder.Entity("DOMAIN.Model.AdmissionScore", b =>
                {
                    b.HasOne("DOMAIN.Model.AdmissionApplicant", "AdmissionApplicant")
                        .WithMany()
                        .HasForeignKey("AdmissionApplicantId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("DOMAIN.Model.AdmissionEvaluationSchedule", "AdmissionEvaluationSchedule")
                        .WithMany()
                        .HasForeignKey("AdmissionEvaluationScheduleId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("DOMAIN.Model.AdmissionProgramRequirement", "AdmissionProgramRequirement")
                        .WithMany()
                        .HasForeignKey("AdmissionProgramRequirementId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("DOMAIN.Model.User", "Evaluator")
                        .WithMany()
                        .HasForeignKey("EvaluatorId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("AdmissionApplicant");

                    b.Navigation("AdmissionEvaluationSchedule");

                    b.Navigation("AdmissionProgramRequirement");

                    b.Navigation("Evaluator");
                });

            modelBuilder.Entity("DOMAIN.Model.Building", b =>
                {
                    b.HasOne("DOMAIN.Model.Campus", "Campus")
                        .WithMany()
                        .HasForeignKey("CampusId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Campus");
                });

            modelBuilder.Entity("DOMAIN.Model.Bulletin", b =>
                {
                    b.HasOne("DOMAIN.Model.BulletinCategory", "Category")
                        .WithMany()
                        .HasForeignKey("BulletinCategoryId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("DOMAIN.Model.User", "PostedByUser")
                        .WithMany()
                        .HasForeignKey("PostedByUserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("PostedByUser");
                });

            modelBuilder.Entity("DOMAIN.Model.BulletinScope", b =>
                {
                    b.HasOne("DOMAIN.Model.AcademicProgram", "AcademicProgram")
                        .WithMany()
                        .HasForeignKey("AcademicProgramId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("DOMAIN.Model.Bulletin", "Bulletin")
                        .WithMany()
                        .HasForeignKey("BulletinId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("AcademicProgram");

                    b.Navigation("Bulletin");
                });

            modelBuilder.Entity("DOMAIN.Model.Campus", b =>
                {
                    b.HasOne("DOMAIN.Model.Agency", "Agency")
                        .WithMany("Campuses")
                        .HasForeignKey("AgencyId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Agency");
                });

            modelBuilder.Entity("DOMAIN.Model.ClearanceTag", b =>
                {
                    b.HasOne("DOMAIN.Model.ClearanceType", "ClearanceType")
                        .WithMany()
                        .HasForeignKey("ClearanceTypeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("DOMAIN.Model.User", "DuWhoTag")
                        .WithMany()
                        .HasForeignKey("DuWhoTagId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("DOMAIN.Model.User", "UnclearedUser")
                        .WithMany()
                        .HasForeignKey("UnclearedUserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("DOMAIN.Model.User", "UserWhoCleared")
                        .WithMany()
                        .HasForeignKey("UserWhoClearedId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("ClearanceType");

                    b.Navigation("DuWhoTag");

                    b.Navigation("UnclearedUser");

                    b.Navigation("UserWhoCleared");
                });

            modelBuilder.Entity("DOMAIN.Model.College", b =>
                {
                    b.HasOne("DOMAIN.Model.Campus", "Campus")
                        .WithMany()
                        .HasForeignKey("CampusId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Campus");
                });

            modelBuilder.Entity("DOMAIN.Model.Course", b =>
                {
                    b.HasOne("DOMAIN.Model.EducationalQualityAssuranceType", "EducationalQualityAssuranceType")
                        .WithMany()
                        .HasForeignKey("EducationalQualityAssuranceTypeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("DOMAIN.Model.Course", "Parent")
                        .WithMany()
                        .HasForeignKey("ParentId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("DOMAIN.Model.SkillsFrameworkTrackSpecialization", "SfTrackSpecialization")
                        .WithMany()
                        .HasForeignKey("SfTrackSpecializationId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("EducationalQualityAssuranceType");

                    b.Navigation("Parent");

                    b.Navigation("SfTrackSpecialization");
                });

            modelBuilder.Entity("DOMAIN.Model.CourseCrediting", b =>
                {
                    b.HasOne("DOMAIN.Model.Course", "Course")
                        .WithMany()
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("DOMAIN.Model.User", "CreditToUser")
                        .WithMany()
                        .HasForeignKey("CreditToUserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("DOMAIN.Model.User", "EvaluatedByUser")
                        .WithMany()
                        .HasForeignKey("EvaluatedByUserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("DOMAIN.Model.OtherSchool", "OtherSchool")
                        .WithMany()
                        .HasForeignKey("OtherSchoolId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Course");

                    b.Navigation("CreditToUser");

                    b.Navigation("EvaluatedByUser");

                    b.Navigation("OtherSchool");
                });

            modelBuilder.Entity("DOMAIN.Model.CourseFee", b =>
                {
                    b.HasOne("DOMAIN.Model.Course", "Course")
                        .WithMany()
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("DOMAIN.Model.EnrollmentFee", "Fee")
                        .WithMany()
                        .HasForeignKey("FeeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Course");

                    b.Navigation("Fee");
                });

            modelBuilder.Entity("DOMAIN.Model.CourseRequisite", b =>
                {
                    b.HasOne("DOMAIN.Model.Course", "Course")
                        .WithMany("CourseRequisites")
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("DOMAIN.Model.Course", "RequisiteCourse")
                        .WithMany()
                        .HasForeignKey("RequisiteCourseId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Course");

                    b.Navigation("RequisiteCourse");
                });

            modelBuilder.Entity("DOMAIN.Model.CourseToLearningObjectiveMapping", b =>
                {
                    b.HasOne("DOMAIN.Model.Course", "Course")
                        .WithMany()
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("DOMAIN.Model.EducationalQualityAssuranceLearningObjective", "EducationalQualityAssuranceLearningObjective")
                        .WithMany()
                        .HasForeignKey("EducationalQualityAssuranceLearningObjectiveId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Course");

                    b.Navigation("EducationalQualityAssuranceLearningObjective");
                });

            modelBuilder.Entity("DOMAIN.Model.Curriculum", b =>
                {
                    b.HasOne("DOMAIN.Model.AcademicProgram", "AcademicProgram")
                        .WithMany()
                        .HasForeignKey("AcademicProgramId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("DOMAIN.Model.AcademicTerm", "AcademicTerm")
                        .WithMany()
                        .HasForeignKey("AcademicTermId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("DOMAIN.Model.GradeInput", "MinGradeToBeCulled")
                        .WithMany()
                        .HasForeignKey("MinGradeToBeCulledId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("DOMAIN.Model.ProgramType", "ProgramType")
                        .WithMany()
                        .HasForeignKey("ProgramTypeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("AcademicProgram");

                    b.Navigation("AcademicTerm");

                    b.Navigation("MinGradeToBeCulled");

                    b.Navigation("ProgramType");
                });

            modelBuilder.Entity("DOMAIN.Model.CurriculumDetail", b =>
                {
                    b.HasOne("DOMAIN.Model.Course", "Course")
                        .WithMany()
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("DOMAIN.Model.Curriculum", "Curriculum")
                        .WithMany()
                        .HasForeignKey("CurriculumId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Course");

                    b.Navigation("Curriculum");
                });

            modelBuilder.Entity("DOMAIN.Model.Cycle", b =>
                {
                    b.HasOne("DOMAIN.Model.Campus", "Campus")
                        .WithMany()
                        .HasForeignKey("CampusId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Campus");
                });

            modelBuilder.Entity("DOMAIN.Model.EducationalQualityAssuranceCourseObjective", b =>
                {
                    b.HasOne("DOMAIN.Model.EducationalQualityAssuranceProgramObjective", "EqaProgramObjective")
                        .WithMany()
                        .HasForeignKey("EqaProgramObjectiveId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("EqaProgramObjective");
                });

            modelBuilder.Entity("DOMAIN.Model.EducationalQualityAssuranceEducationalGoal", b =>
                {
                    b.HasOne("DOMAIN.Model.EducationalQualityAssuranceType", "EqaType")
                        .WithMany()
                        .HasForeignKey("EqaTypeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("EqaType");
                });

            modelBuilder.Entity("DOMAIN.Model.EducationalQualityAssuranceLearningObjective", b =>
                {
                    b.HasOne("DOMAIN.Model.EducationalQualityAssuranceCourseObjective", "EqaCourseObjective")
                        .WithMany()
                        .HasForeignKey("EqaCourseObjectiveId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("EqaCourseObjective");
                });

            modelBuilder.Entity("DOMAIN.Model.EducationalQualityAssuranceProgramObjective", b =>
                {
                    b.HasOne("DOMAIN.Model.EducationalQualityAssuranceEducationalGoal", "EqaEducationalGoal")
                        .WithMany()
                        .HasForeignKey("EqaEducationalGoalId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("EqaEducationalGoal");
                });

            modelBuilder.Entity("DOMAIN.Model.EducationalQualityAssuranceProgramObjectiveToJobRole", b =>
                {
                    b.HasOne("DOMAIN.Model.EducationalQualityAssuranceProgramObjective", "EqaProgramObjective")
                        .WithMany()
                        .HasForeignKey("EqaProgramObjectiveId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("DOMAIN.Model.SkillsFrameworkJobRole", "SfJobRole")
                        .WithMany()
                        .HasForeignKey("SfJobRoleId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("EqaProgramObjective");

                    b.Navigation("SfJobRole");
                });

            modelBuilder.Entity("DOMAIN.Model.Enrollment", b =>
                {
                    b.HasOne("DOMAIN.Model.EnrollmentRole", "EnrollmentRole")
                        .WithMany()
                        .HasForeignKey("EnrollmentRoleId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("DOMAIN.Model.Schedule", "Schedule")
                        .WithMany()
                        .HasForeignKey("ScheduleId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("DOMAIN.Model.User", "StudentUser")
                        .WithMany()
                        .HasForeignKey("StudentUserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("EnrollmentRole");

                    b.Navigation("Schedule");

                    b.Navigation("StudentUser");
                });

            modelBuilder.Entity("DOMAIN.Model.EnrollmentBilling", b =>
                {
                    b.HasOne("DOMAIN.Model.Cycle", "Cycle")
                        .WithMany()
                        .HasForeignKey("CycleId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("DOMAIN.Model.EnrollmentFee", "EnrollmentFee")
                        .WithMany()
                        .HasForeignKey("EnrollmentFeeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("DOMAIN.Model.Enrollment", "Enrollment")
                        .WithMany()
                        .HasForeignKey("EnrollmentId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("DOMAIN.Model.Voucher", "Voucher")
                        .WithMany()
                        .HasForeignKey("VoucherId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Cycle");

                    b.Navigation("Enrollment");

                    b.Navigation("EnrollmentFee");

                    b.Navigation("Voucher");
                });

            modelBuilder.Entity("DOMAIN.Model.EnrollmentFee", b =>
                {
                    b.HasOne("DOMAIN.Model.FundSource", "FundSource")
                        .WithMany()
                        .HasForeignKey("FundSourceId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("DOMAIN.Model.TableObject", "Object")
                        .WithMany()
                        .HasForeignKey("ObjectId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("FundSource");

                    b.Navigation("Object");
                });

            modelBuilder.Entity("DOMAIN.Model.EnrollmentGrade", b =>
                {
                    b.HasOne("DOMAIN.Model.User", "EncodedByUser")
                        .WithMany()
                        .HasForeignKey("EncodedByUserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("DOMAIN.Model.Enrollment", "Enrollment")
                        .WithMany()
                        .HasForeignKey("EnrollmentId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("DOMAIN.Model.GradeInput", "GradeInput")
                        .WithMany()
                        .HasForeignKey("GradeInputId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("DOMAIN.Model.GradingPeriod", "GradingPeriod")
                        .WithMany()
                        .HasForeignKey("GradingPeriodId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("EncodedByUser");

                    b.Navigation("Enrollment");

                    b.Navigation("GradeInput");

                    b.Navigation("GradingPeriod");
                });

            modelBuilder.Entity("DOMAIN.Model.EnrollmentLog", b =>
                {
                    b.HasOne("DOMAIN.Model.Enrollment", "Enrollment")
                        .WithMany()
                        .HasForeignKey("EnrollmentId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("DOMAIN.Model.User", "LogByUser")
                        .WithMany()
                        .HasForeignKey("LogByUserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Enrollment");

                    b.Navigation("LogByUser");
                });

            modelBuilder.Entity("DOMAIN.Model.EnrollmentPayment", b =>
                {
                    b.HasOne("DOMAIN.Model.User", "Cashier")
                        .WithMany()
                        .HasForeignKey("CashierId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("DOMAIN.Model.EnrollmentBilling", "EnrollmentBilling")
                        .WithMany()
                        .HasForeignKey("EnrollmentBillingId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Cashier");

                    b.Navigation("EnrollmentBilling");
                });

            modelBuilder.Entity("DOMAIN.Model.EvaluationPeriod", b =>
                {
                    b.HasOne("DOMAIN.Model.AcademicProgram", "AcademicProgram")
                        .WithMany()
                        .HasForeignKey("AcademicProgramId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("DOMAIN.Model.User", "CreatedByUser")
                        .WithMany()
                        .HasForeignKey("CreatedByUserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("DOMAIN.Model.Cycle", "Cycle")
                        .WithMany()
                        .HasForeignKey("CycleId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("DOMAIN.Model.EnrollmentRole", "EnrollmentRole")
                        .WithMany()
                        .HasForeignKey("EnrollmentRoleId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("DOMAIN.Model.Instrument", "Instrument")
                        .WithMany()
                        .HasForeignKey("InstrumentId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("AcademicProgram");

                    b.Navigation("CreatedByUser");

                    b.Navigation("Cycle");

                    b.Navigation("EnrollmentRole");

                    b.Navigation("Instrument");
                });

            modelBuilder.Entity("DOMAIN.Model.EvaluationRating", b =>
                {
                    b.HasOne("DOMAIN.Model.Enrollment", "Enrollment")
                        .WithMany()
                        .HasForeignKey("EnrollmentId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("DOMAIN.Model.EvaluationPeriod", "EvaluationPeriod")
                        .WithMany()
                        .HasForeignKey("EvaluationPeriodId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Enrollment");

                    b.Navigation("EvaluationPeriod");
                });

            modelBuilder.Entity("DOMAIN.Model.EvaluationRatingDetail", b =>
                {
                    b.HasOne("DOMAIN.Model.EvaluationRating", "EvaluationRating")
                        .WithMany()
                        .HasForeignKey("EvaluationRatingId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("DOMAIN.Model.LikertQuestion", "LikertQuestion")
                        .WithMany()
                        .HasForeignKey("LikertQuestionId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("EvaluationRating");

                    b.Navigation("LikertQuestion");
                });

            modelBuilder.Entity("DOMAIN.Model.GeneratedSections", b =>
                {
                    b.HasOne("DOMAIN.Model.CurriculumDetail", "CurriculumDetail")
                        .WithMany()
                        .HasForeignKey("CurriculumDetailId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("DOMAIN.Model.Cycle", "Cycle")
                        .WithMany()
                        .HasForeignKey("CycleId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("CurriculumDetail");

                    b.Navigation("Cycle");
                });

            modelBuilder.Entity("DOMAIN.Model.GradeBook", b =>
                {
                    b.HasOne("DOMAIN.Model.Schedule", "Schedule")
                        .WithMany("GradeBooks")
                        .HasForeignKey("ScheduleId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Schedule");
                });

            modelBuilder.Entity("DOMAIN.Model.GradeBookItem", b =>
                {
                    b.HasOne("DOMAIN.Model.GradeBook", "GradeBook")
                        .WithMany("GradeBookItems")
                        .HasForeignKey("GradeBookId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("DOMAIN.Model.GradingPeriod", "GradingPeriod")
                        .WithMany()
                        .HasForeignKey("GradingPeriodId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("GradeBook");

                    b.Navigation("GradingPeriod");
                });

            modelBuilder.Entity("DOMAIN.Model.GradeBookItemDetail", b =>
                {
                    b.HasOne("DOMAIN.Model.EducationalQualityAssuranceAssessmentType", "EqaAssessmentType")
                        .WithMany()
                        .HasForeignKey("EqaAssessmentTypeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("DOMAIN.Model.GradeBookItem", "GradeBookItem")
                        .WithMany("GradeBookItemDetails")
                        .HasForeignKey("GradeBookItemId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("EqaAssessmentType");

                    b.Navigation("GradeBookItem");
                });

            modelBuilder.Entity("DOMAIN.Model.GradeBookItemToEqaLearningObjectiveMapping", b =>
                {
                    b.HasOne("DOMAIN.Model.EducationalQualityAssuranceLearningObjective", "EqaLearningObjective")
                        .WithMany()
                        .HasForeignKey("EqaLearningObjectiveId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("DOMAIN.Model.GradeBookItemDetail", "GradeBookitemDetail")
                        .WithMany()
                        .HasForeignKey("GradeBookItemDetailId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("EqaLearningObjective");

                    b.Navigation("GradeBookitemDetail");
                });

            modelBuilder.Entity("DOMAIN.Model.GradeBookScore", b =>
                {
                    b.HasOne("DOMAIN.Model.Enrollment", "Enrollment")
                        .WithMany()
                        .HasForeignKey("EnrollmentId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Enrollment");
                });

            modelBuilder.Entity("DOMAIN.Model.GradingPeriod", b =>
                {
                    b.HasOne("DOMAIN.Model.College", "College")
                        .WithMany()
                        .HasForeignKey("CollegeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("College");
                });

            modelBuilder.Entity("DOMAIN.Model.GraduationApplicant", b =>
                {
                    b.HasOne("DOMAIN.Model.AcademicProgram", "AcademicProgram")
                        .WithMany()
                        .HasForeignKey("AcademicProgramId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("DOMAIN.Model.User", "GraduatingStudent")
                        .WithMany()
                        .HasForeignKey("GraduatingStudentId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("DOMAIN.Model.GraduationCampus", "GraduationCampus")
                        .WithMany()
                        .HasForeignKey("GraduationCampusId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("AcademicProgram");

                    b.Navigation("GraduatingStudent");

                    b.Navigation("GraduationCampus");
                });

            modelBuilder.Entity("DOMAIN.Model.GraduationCampus", b =>
                {
                    b.HasOne("DOMAIN.Model.Campus", "Campus")
                        .WithMany()
                        .HasForeignKey("CampusId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Campus");
                });

            modelBuilder.Entity("DOMAIN.Model.LikertQuestion", b =>
                {
                    b.HasOne("DOMAIN.Model.Parameter", "Parameter")
                        .WithMany()
                        .HasForeignKey("ParameterId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Parameter");
                });

            modelBuilder.Entity("DOMAIN.Model.Parameter", b =>
                {
                    b.HasOne("DOMAIN.Model.ParameterSubCategory", "ParameterSubCategory")
                        .WithMany()
                        .HasForeignKey("ParameterSubCategoryId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("DOMAIN.Model.Parameter", "Parent")
                        .WithMany()
                        .HasForeignKey("ParentId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("ParameterSubCategory");

                    b.Navigation("Parent");
                });

            modelBuilder.Entity("DOMAIN.Model.ParameterCategory", b =>
                {
                    b.HasOne("DOMAIN.Model.Instrument", "Instrument")
                        .WithMany()
                        .HasForeignKey("InstrumentId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Instrument");
                });

            modelBuilder.Entity("DOMAIN.Model.ParameterSubCategory", b =>
                {
                    b.HasOne("DOMAIN.Model.ParameterCategory", "ParameterCategory")
                        .WithMany()
                        .HasForeignKey("ParameterCategoryId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("ParameterCategory");
                });

            modelBuilder.Entity("DOMAIN.Model.PetitionCourses", b =>
                {
                    b.HasOne("DOMAIN.Model.AcademicProgram", "AcademicProgram")
                        .WithMany()
                        .HasForeignKey("AcademicProgramId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("DOMAIN.Model.Course", "Course")
                        .WithMany()
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("DOMAIN.Model.Cycle", "Cycle")
                        .WithMany()
                        .HasForeignKey("CycleId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("DOMAIN.Model.User", "PetitionByUser")
                        .WithMany()
                        .HasForeignKey("PetitionByUserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("AcademicProgram");

                    b.Navigation("Course");

                    b.Navigation("Cycle");

                    b.Navigation("PetitionByUser");
                });

            modelBuilder.Entity("DOMAIN.Model.PortfolioDisciplinaryAction", b =>
                {
                    b.HasOne("DOMAIN.Model.User", "ImposedByUser")
                        .WithMany()
                        .HasForeignKey("ImposedByUserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("DOMAIN.Model.PortfolioIncident", "PortfolioIncident")
                        .WithMany()
                        .HasForeignKey("PortfolioIncidentId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("ImposedByUser");

                    b.Navigation("PortfolioIncident");
                });

            modelBuilder.Entity("DOMAIN.Model.PortfolioEntry", b =>
                {
                    b.HasOne("DOMAIN.Model.PortfolioProvider", "PortfolioProvider")
                        .WithMany()
                        .HasForeignKey("PortfolioProviderId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("DOMAIN.Model.PortfolioScope", "PortfolioScope")
                        .WithMany()
                        .HasForeignKey("PortfolioScopeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("DOMAIN.Model.PortfolioType", "PortfolioType")
                        .WithMany()
                        .HasForeignKey("PortfolioTypeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("DOMAIN.Model.SkillsFrameworkProficiencyLevel", "SfProficiencyLevel")
                        .WithMany()
                        .HasForeignKey("SfProficiencyLevelId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("DOMAIN.Model.SkillsFrameworkSkills", "SfSkills")
                        .WithMany()
                        .HasForeignKey("SfSkillsId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("DOMAIN.Model.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("PortfolioProvider");

                    b.Navigation("PortfolioScope");

                    b.Navigation("PortfolioType");

                    b.Navigation("SfProficiencyLevel");

                    b.Navigation("SfSkills");

                    b.Navigation("User");
                });

            modelBuilder.Entity("DOMAIN.Model.PortfolioIncident", b =>
                {
                    b.HasOne("DOMAIN.Model.User", "ComplainantUser")
                        .WithMany()
                        .HasForeignKey("ComplainantUserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("DOMAIN.Model.User", "ComplaineeUser")
                        .WithMany()
                        .HasForeignKey("ComplaineeUserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("DOMAIN.Model.User", "EncodedByUser")
                        .WithMany()
                        .HasForeignKey("EncodedByUserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("DOMAIN.Model.PortfolioIncidentType", "PortfolioIncidentType")
                        .WithMany()
                        .HasForeignKey("PortfolioIncidentTypeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("ComplainantUser");

                    b.Navigation("ComplaineeUser");

                    b.Navigation("EncodedByUser");

                    b.Navigation("PortfolioIncidentType");
                });

            modelBuilder.Entity("DOMAIN.Model.PortfolioProvider", b =>
                {
                    b.HasOne("DOMAIN.Model.SectorDiscipline", "SectorDiscipline")
                        .WithMany()
                        .HasForeignKey("SectorDisciplineId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("SectorDiscipline");
                });

            modelBuilder.Entity("DOMAIN.Model.PortfolioSession", b =>
                {
                    b.HasOne("DOMAIN.Model.PortfolioSessionType", "PortfolioSessionType")
                        .WithMany()
                        .HasForeignKey("PortfolioSessionTypeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("PortfolioSessionType");
                });

            modelBuilder.Entity("DOMAIN.Model.PortfolioSessionInvolved", b =>
                {
                    b.HasOne("DOMAIN.Model.PortfolioSession", "PortfolioSession")
                        .WithMany()
                        .HasForeignKey("PortfolioSessionId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("DOMAIN.Model.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("PortfolioSession");

                    b.Navigation("User");
                });

            modelBuilder.Entity("DOMAIN.Model.Room", b =>
                {
                    b.HasOne("DOMAIN.Model.Building", "Building")
                        .WithMany()
                        .HasForeignKey("BuildingId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Building");
                });

            modelBuilder.Entity("DOMAIN.Model.Schedule", b =>
                {
                    b.HasOne("DOMAIN.Model.AcademicProgram", "AcademicProgram")
                        .WithMany()
                        .HasForeignKey("AcademicProgramId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("DOMAIN.Model.Course", "Course")
                        .WithMany()
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("DOMAIN.Model.User", "CreatedByUser")
                        .WithMany()
                        .HasForeignKey("CreatedByUserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("DOMAIN.Model.Cycle", "Cycle")
                        .WithMany()
                        .HasForeignKey("CycleId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("DOMAIN.Model.Room", "Room")
                        .WithMany()
                        .HasForeignKey("RoomId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("AcademicProgram");

                    b.Navigation("Course");

                    b.Navigation("CreatedByUser");

                    b.Navigation("Cycle");

                    b.Navigation("Room");
                });

            modelBuilder.Entity("DOMAIN.Model.ScheduleAttendance", b =>
                {
                    b.HasOne("DOMAIN.Model.User", "AnyUser")
                        .WithMany()
                        .HasForeignKey("AnyUserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("DOMAIN.Model.Schedule", "Schedule")
                        .WithMany()
                        .HasForeignKey("ScheduleId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("AnyUser");

                    b.Navigation("Schedule");
                });

            modelBuilder.Entity("DOMAIN.Model.ScheduleMerge", b =>
                {
                    b.HasOne("DOMAIN.Model.Schedule", "Schedule")
                        .WithMany()
                        .HasForeignKey("ScheduleId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Schedule");
                });

            modelBuilder.Entity("DOMAIN.Model.ScheduleTeacher", b =>
                {
                    b.HasOne("DOMAIN.Model.EnrollmentRole", "EnrollmentRole")
                        .WithMany()
                        .HasForeignKey("EnrollmentRoleId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("DOMAIN.Model.Schedule", "Schedule")
                        .WithMany()
                        .HasForeignKey("ScheduleId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("DOMAIN.Model.User", "TeacherUser")
                        .WithMany()
                        .HasForeignKey("TeacherUserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("EnrollmentRole");

                    b.Navigation("Schedule");

                    b.Navigation("TeacherUser");
                });

            modelBuilder.Entity("DOMAIN.Model.ScholarshipApplication", b =>
                {
                    b.HasOne("DOMAIN.Model.User", "ApplicantUser")
                        .WithMany()
                        .HasForeignKey("ApplicantUserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("DOMAIN.Model.ScholarshipCycleLimit", "ScholarshipCycleLimit")
                        .WithMany()
                        .HasForeignKey("ScholarshipCycleLimitId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("ApplicantUser");

                    b.Navigation("ScholarshipCycleLimit");
                });

            modelBuilder.Entity("DOMAIN.Model.ScholarshipCycleLimit", b =>
                {
                    b.HasOne("DOMAIN.Model.Cycle", "Cycle")
                        .WithMany()
                        .HasForeignKey("CycleId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("DOMAIN.Model.ScholarshipList", "ScholarshipList")
                        .WithMany()
                        .HasForeignKey("ScholarshipListId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Cycle");

                    b.Navigation("ScholarshipList");
                });

            modelBuilder.Entity("DOMAIN.Model.ScholarshipEvaluation", b =>
                {
                    b.HasOne("DOMAIN.Model.User", "EvaluatorUser")
                        .WithMany()
                        .HasForeignKey("EvaluatorUserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("DOMAIN.Model.ScholarshipApplication", "ScholarshipApplication")
                        .WithMany()
                        .HasForeignKey("ScholarshipApplicationId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("DOMAIN.Model.ScholarshipRequirement", "ScholarshipRequirement")
                        .WithMany()
                        .HasForeignKey("ScholarshipRequirementId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("EvaluatorUser");

                    b.Navigation("ScholarshipApplication");

                    b.Navigation("ScholarshipRequirement");
                });

            modelBuilder.Entity("DOMAIN.Model.ScholarshipRequirement", b =>
                {
                    b.HasOne("DOMAIN.Model.Requirement", "Requirement")
                        .WithMany()
                        .HasForeignKey("RequirementId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("DOMAIN.Model.ScholarshipList", "ScholarshipList")
                        .WithMany()
                        .HasForeignKey("ScholarshipListId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Requirement");

                    b.Navigation("ScholarshipList");
                });

            modelBuilder.Entity("DOMAIN.Model.SectorDiscipline", b =>
                {
                    b.HasOne("DOMAIN.Model.SectorDiscipline", "Parent")
                        .WithMany("Children")
                        .HasForeignKey("ParentId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("Parent");
                });

            modelBuilder.Entity("DOMAIN.Model.SkillsFrameworkCompetencyCategory", b =>
                {
                    b.HasOne("DOMAIN.Model.SectorDiscipline", "SectorDiscipline")
                        .WithMany()
                        .HasForeignKey("SectorDisciplineId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("DOMAIN.Model.SkillsFrameworkCompetencyType", "SfCompetencyType")
                        .WithMany()
                        .HasForeignKey("SfCompetencyTypeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("SectorDiscipline");

                    b.Navigation("SfCompetencyType");
                });

            modelBuilder.Entity("DOMAIN.Model.SkillsFrameworkCourseToCompetency", b =>
                {
                    b.HasOne("DOMAIN.Model.Course", "Course")
                        .WithMany()
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("DOMAIN.Model.SkillsFrameworkSkillsToCompetency", "SkillsFrameworkSkillsToCompetency")
                        .WithMany()
                        .HasForeignKey("SkillsFrameworkSkillsToCompetencyId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Course");

                    b.Navigation("SkillsFrameworkSkillsToCompetency");
                });

            modelBuilder.Entity("DOMAIN.Model.SkillsFrameworkJobRole", b =>
                {
                    b.HasOne("DOMAIN.Model.SkillsFrameworkTrackSpecialization", "SfTrackSpecialization")
                        .WithMany()
                        .HasForeignKey("SfTrackSpecializationId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("SfTrackSpecialization");
                });

            modelBuilder.Entity("DOMAIN.Model.SkillsFrameworkJobRoleToCriticalWorkFunction", b =>
                {
                    b.HasOne("DOMAIN.Model.SkillsFrameworkCriticalWorkFunction", "SfCriticalWorkFunction")
                        .WithMany()
                        .HasForeignKey("SfCriticalWorkFunctionId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("DOMAIN.Model.SkillsFrameworkJobRole", "SfJobRole")
                        .WithMany()
                        .HasForeignKey("SfJobRoleId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("SfCriticalWorkFunction");

                    b.Navigation("SfJobRole");
                });

            modelBuilder.Entity("DOMAIN.Model.SkillsFrameworkJobRoleToProficiencyLevel", b =>
                {
                    b.HasOne("DOMAIN.Model.SkillsFrameworkJobRoleToCriticalWorkFunction", "SfJobRoleToCriticalWorkFunction")
                        .WithMany()
                        .HasForeignKey("SfJobRoleToCriticalWorkFunctionId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("DOMAIN.Model.SkillsFrameworkProficiencyLevel", "SfProficiencyLevel")
                        .WithMany()
                        .HasForeignKey("SfProficiencyLevelId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("DOMAIN.Model.SkillsFrameworkSkills", "SkillsFrameworkSkills")
                        .WithMany()
                        .HasForeignKey("SkillsFrameworkSkillsId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("SfJobRoleToCriticalWorkFunction");

                    b.Navigation("SfProficiencyLevel");

                    b.Navigation("SkillsFrameworkSkills");
                });

            modelBuilder.Entity("DOMAIN.Model.SkillsFrameworkKeyTask", b =>
                {
                    b.HasOne("DOMAIN.Model.SkillsFrameworkCriticalWorkFunction", "SfCriticalWorkFunction")
                        .WithMany()
                        .HasForeignKey("SfCriticalWorkFunctionId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("SfCriticalWorkFunction");
                });

            modelBuilder.Entity("DOMAIN.Model.SkillsFrameworkPerformaceExpectationToJobRole", b =>
                {
                    b.HasOne("DOMAIN.Model.SkillsFrameworkJobRole", "SfJobRole")
                        .WithMany()
                        .HasForeignKey("SfJobRoleId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("DOMAIN.Model.SkillsFrameworkPerformanceExpectation", "SfPerformanceExpectation")
                        .WithMany()
                        .HasForeignKey("SfPerformanceExpectationId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("SfJobRole");

                    b.Navigation("SfPerformanceExpectation");
                });

            modelBuilder.Entity("DOMAIN.Model.SkillsFrameworkProficiencyLevel", b =>
                {
                    b.HasOne("DOMAIN.Model.SkillsFrameworkGroupLevel", "SfGroupLevel")
                        .WithMany()
                        .HasForeignKey("SfGroupLevelId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("SfGroupLevel");
                });

            modelBuilder.Entity("DOMAIN.Model.SkillsFrameworkSkills", b =>
                {
                    b.HasOne("DOMAIN.Model.SkillsFrameworkCompetencyCategory", "SfCompetencyCategory")
                        .WithMany()
                        .HasForeignKey("SfCompetencyCategoryId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("SfCompetencyCategory");
                });

            modelBuilder.Entity("DOMAIN.Model.SkillsFrameworkSkillsToCompetency", b =>
                {
                    b.HasOne("DOMAIN.Model.SkillsFrameworkCompetency", "SfCompetency")
                        .WithMany()
                        .HasForeignKey("SfCompetencyId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("DOMAIN.Model.SkillsFrameworkProficiencyLevel", "SfProficiencyLevel")
                        .WithMany()
                        .HasForeignKey("SfProficiencyLevelId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("DOMAIN.Model.SkillsFrameworkSkills", "SfSkills")
                        .WithMany()
                        .HasForeignKey("SfSkillsId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("SfCompetency");

                    b.Navigation("SfProficiencyLevel");

                    b.Navigation("SfSkills");
                });

            modelBuilder.Entity("DOMAIN.Model.SkillsFrameworkTrackSpecialization", b =>
                {
                    b.HasOne("DOMAIN.Model.SectorDiscipline", "SectorDiscipline")
                        .WithMany()
                        .HasForeignKey("SectorDisciplineId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("SectorDiscipline");
                });

            modelBuilder.Entity("DOMAIN.Model.TableObject", b =>
                {
                    b.HasOne("DOMAIN.Model.AccountGroup", "AccountGroup")
                        .WithMany()
                        .HasForeignKey("AccountGroupId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("DOMAIN.Model.TableObject", "Parent")
                        .WithMany()
                        .HasForeignKey("ParentId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("AccountGroup");

                    b.Navigation("Parent");
                });

            modelBuilder.Entity("DOMAIN.Model.TemplateGradeBookItem", b =>
                {
                    b.HasOne("DOMAIN.Model.GradingPeriod", "GradingPeriod")
                        .WithMany()
                        .HasForeignKey("GradingPeriodId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("DOMAIN.Model.TemplateGradeBook", "TemplateGradeBook")
                        .WithMany("TemplateGradeBookItems")
                        .HasForeignKey("TemplateGradeBookId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("GradingPeriod");

                    b.Navigation("TemplateGradeBook");
                });

            modelBuilder.Entity("DOMAIN.Model.TemplateGradeBookItemDetail", b =>
                {
                    b.HasOne("DOMAIN.Model.EducationalQualityAssuranceAssessmentType", "EqaAssessmentType")
                        .WithMany()
                        .HasForeignKey("EqaAssessmentTypeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("DOMAIN.Model.TemplateGradeBookItem", "TemplateGradeBookItem")
                        .WithMany("TemplateGradeBookItemDetails")
                        .HasForeignKey("TemplateGradeBookItemId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("EqaAssessmentType");

                    b.Navigation("TemplateGradeBookItem");
                });

            modelBuilder.Entity("DOMAIN.Model.UserAccessGroupDetails", b =>
                {
                    b.HasOne("DOMAIN.Model.AccessGroupAction", "AccessGroupAction")
                        .WithMany()
                        .HasForeignKey("AccessGroupActionId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("DOMAIN.Model.User", "User")
                        .WithMany("UserAccessGroupDetails")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("AccessGroupAction");

                    b.Navigation("User");
                });

            modelBuilder.Entity("DOMAIN.Model.UserCampusDetails", b =>
                {
                    b.HasOne("DOMAIN.Model.Campus", "Campus")
                        .WithMany()
                        .HasForeignKey("CampusId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("DOMAIN.Model.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Campus");

                    b.Navigation("User");
                });

            modelBuilder.Entity("DOMAIN.Model.VoucherApplied", b =>
                {
                    b.HasOne("DOMAIN.Model.EnrollmentBilling", "EnrollmentBilling")
                        .WithMany()
                        .HasForeignKey("EnrollmentBillingId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("DOMAIN.Model.Voucher", "Voucher")
                        .WithMany()
                        .HasForeignKey("VoucherId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("EnrollmentBilling");

                    b.Navigation("Voucher");
                });

            modelBuilder.Entity("DOMAIN.Model.AccessGroup", b =>
                {
                    b.Navigation("AccessGroupActions");
                });

            modelBuilder.Entity("DOMAIN.Model.Agency", b =>
                {
                    b.Navigation("Campuses");
                });

            modelBuilder.Entity("DOMAIN.Model.Course", b =>
                {
                    b.Navigation("CourseRequisites");
                });

            modelBuilder.Entity("DOMAIN.Model.GradeBook", b =>
                {
                    b.Navigation("GradeBookItems");
                });

            modelBuilder.Entity("DOMAIN.Model.GradeBookItem", b =>
                {
                    b.Navigation("GradeBookItemDetails");
                });

            modelBuilder.Entity("DOMAIN.Model.Schedule", b =>
                {
                    b.Navigation("GradeBooks");
                });

            modelBuilder.Entity("DOMAIN.Model.SectorDiscipline", b =>
                {
                    b.Navigation("Children");
                });

            modelBuilder.Entity("DOMAIN.Model.TemplateGradeBook", b =>
                {
                    b.Navigation("TemplateGradeBookItems");
                });

            modelBuilder.Entity("DOMAIN.Model.TemplateGradeBookItem", b =>
                {
                    b.Navigation("TemplateGradeBookItemDetails");
                });

            modelBuilder.Entity("DOMAIN.Model.User", b =>
                {
                    b.Navigation("UserAccessGroupDetails");
                });
#pragma warning restore 612, 618
        }
    }
}
